<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Hangman</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/index.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simple-keyboard@latest/build/css/index.css">
</head>
<body>
    <script type="module">
        import { createApp, reactive } from 'https://unpkg.com/petite-vue?module'

        async function getGame () {
            const response = await fetch ("/game")
            return await response.json()
        }

        async function tryLetter (letter) {
            const response = await fetch(`/try-letter/${letter}`)
            return await response.json()
        }

        const store = reactive({
            game: null,
            setGame (game) {
                this.game = game
            }
        })

        function Word () {
            return {
                $template: "#word-template",
                get letters () {
                    return this.store.game.letters.map (letter => {
                        return letter.type === "discovered"
                            ? letter.letter
                            : ""
                    })
                }
            }
        }

        function Keyboard () {
            return {
                $template: "#keyboard-template",
                _keys: [
                    "azertyuiop", 
                    "qsdfghjklm",
                    "wxcvbn"
                ],
                get lines () {
                    return this._keys.map (keys => keys.split(""))
                },
                async tryLetter (letter) {
                    this.store.setGame(
                        await tryLetter(letter)
                    )
                }
            }
        }

        function Game () {
            return {
                $template: "#game-template",
                async mounted () {
                    store.setGame(await getGame())
                }
            }
        }

        createApp({
            Word,
            Keyboard,
            Game,
            store
        }).mount("#app")
    </script>

    <template id="keyboard-template">
        <div class="keyboard-line" v-for="line in lines">
            <button class="keyboard-key" v-for="key in line" @click="tryLetter(key)">
                {{ key }}
            </button>
        </div>
    </template>

    <template id="word-template">
        <div class="word">
            <div v-for="letter in letters" class="tile">
                {{ letter }}
            </div>
        </div>
    </template>

    <template id="game-template">
        <div v-if="store.game !== null">
            <div class="attemps">
                {{ store.game.failedAttempts }} / {{ store.game.maxFailedAttempts }} attemps
            </div>

            <div v-scope="Word()"></div>

            <div v-scope="Keyboard()"></div>

            <div v-if="store.game !== null && store.game.state === 'lost'">
                <style>
                    html {
                        background-color: #ff000033;
                    }
                </style>
            </div>

            <div v-if="store.game !== null && store.game.state === 'won'">
                <style>
                    html {
                        background-color: #00ff0033;
                    }
                </style>
            </div>
        </div>
    </template>

    <template id="background-template">
    </template>

    <header class="page-header">
        <h1>Hangman game</h1>
    </header>

    <main id="app">        
        <div v-scope="Game()" @vue:mounted="mounted"></div>
    </main>   
</body>
</html>